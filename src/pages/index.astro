---
import { css } from 'ui/css'

import Layout from '@/layouts/layout.astro'

import Socials from '@/components/socials.astro'
import Spacer from '@/components/spacer.astro'
import Stack from '@/components/stack.astro'
import PositionRow from '@/components/position_row.astro'
import ProgressiveBlur from '@/components/progressive_blur.astro'
import LogoFelixGreen from '@/components/logo_felix_green.astro'

import { SITE_TITLE, SITE_DESCRIPTION } from '@/data/constants'
import { positions, type Position } from '@/data/positions'
---

<Layout title={SITE_TITLE} description={SITE_DESCRIPTION}>
	<div
		class={css({
			bg: 'bg',
			minH: '100vh',
			display: 'grid',
			gap: 0,
			md: {
				gridTemplateRows: '1fr',
				gridTemplateColumns: '320px 1fr',
			},
			'& svg path': {
				transition: 'opacity 0.3s ease',
			},
			'& svg g': {
				transition: 'opacity 0.3s ease',
			},
		})}
	>
		<div
			class:list={[
				'svg-hoverable',
				css({
					display: 'flex',
					flexDirection: 'column',
					pt: 36,
					px: 12,
					pb: 12,
					'--svg-fill-opacity': 0,
					'--svg-stroke-opacity': 1,
					_hover: {
						'--svg-fill-opacity': 1,
						'--svg-stroke-opacity': 0,
					},
					h: '100svh',
					textAlign: 'center',
					alignItems: 'center',
					justifyContent: 'center',
					gap: 12,
					md: {
						position: 'sticky',
						top: 0,
						left: 0,
						textAlign: 'inherit',
						minH: 'inherit',
						alignItems: 'inherit',
						justifyContent: 'inherit',
					},
				}),
			]}
		>
			<div class={css({ w: '20' })}>
				<LogoFelixGreen />
			</div>
			<Stack gap="2">
				<p>Felix Green</p>
				<p class={css({ color: 'muted' })}>Design Engineer</p>
			</Stack>
			<Spacer />
			<Socials />
		</div>

		<div
			class:list={[
				'scroll-area',
				css({
					display: 'grid',
					gridTemplateRows: 'repeat(12, auto)',
					md: {
						my: 12,
						gridTemplateRows: 'repeat(8, auto)',
						gridTemplateColumns: 'max-content auto',
					},
					lg: {
						gridTemplateRows: 'repeat(4, auto)',
						gridTemplateColumns: 'max-content max-content 1fr',
					},
					gridRowGap: 4,
				}),
			]}
		>
			{
				positions.map((position: Position) => (
					//
					<PositionRow {position} />
				))
			}
		</div>

		<div
			class={css({
				position: 'fixed',
				top: 0,
				right: 0,
				bottom: 0,
				width: 16,
				pointerEvents: 'none',
			})}
		>
			<ProgressiveBlur blur={32} blurDirection="right" />
		</div>
	</div>
</Layout>

<style>
	.is-visible {
		--svg-fill-opacity: 1;
		--svg-hover-opacity: 1;
		--svg-stroke-opacity: 0;
	}
</style>

<script>
	const hoverSupport = window.matchMedia('(hover: hover)').matches
	const pointerFine = window.matchMedia('(pointer: fine)').matches
	const isTouch = !hoverSupport || !pointerFine

	function observerCallback(
		entries: IntersectionObserverEntry[],
		observer: IntersectionObserver,
	) {
		entries.forEach((entry: IntersectionObserverEntry) => {
			if (entry.isIntersecting) {
				console.log('Element is fully visible in screen')
				// add class to entry

				entry.target.classList.add('is-visible')
			} else {
				console.log('Element is not fully visible in screen')
				// remove class from entry
				entry.target.classList.remove('is-visible')
			}
		})
	}

	if (isTouch) {
		let observer = new IntersectionObserver(observerCallback, {
			threshold: 0.9,
		})

		document.querySelectorAll('.svg-hoverable').forEach((div: Element) => {
			observer.observe(div)
		})
	}
</script>
