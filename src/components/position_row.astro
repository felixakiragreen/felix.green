---
import { css } from 'ui/css'
import { token } from 'ui/tokens'

import Stack from '@/components/stack.astro'
import type { Position } from '@/data/positions'

import ProgressiveBlur from './progressive_blur.astro'
import DateFormatted from './date_formatted.astro'
import LogoAmbition from './logo_ambition.astro'
import LogoTrabian from './logo_trabian.astro'
import LogoEmplify from './logo_emplify.astro'
import LogoBluebridge from './logo_bluebridge.astro'

import SvgProjectMobileRooted from '@/assets/project_mobile_rooted.astro'
import SvgProjectArtTheWorm from '@/assets/project_art_the_worm.astro'
import SvgProjectBrowserVivaFirst from '@/assets/project_browser_vivafirst.astro'
import SvgProjectDesktopVisaViz from '@/assets/project_desktop_visaviz.astro'
import type { Code } from 'astro:components'

const position: Position = Astro.props.position

let blurDirection = 'right'
let gradientStart = '0px'
let gradientEnd = token('sizes.4')
let maskImage = `linear-gradient(to ${blurDirection}, rgba(0, 0, 0, 0) ${gradientStart}, rgba(0, 0, 0, 1) ${gradientEnd})`
---

<div
	class={css({
		display: 'grid',
		gridColumn: '1 / span 3',
		gridTemplateColumns: 'subgrid',
		'--svg-fill-opacity': 0,
		'--svg-stroke-opacity': 1,
		'& #show-date': {
			display: 'none',
		},
		_hover: {
			'--svg-fill-opacity': 1,
			'--svg-stroke-opacity': 0,
			'& #show-date': {
				display: 'flex',
			},
		},
	})}
>
	<Stack
		justifyContent="center"
		alignItems="end"
		gridColumn="1 / span 1"
		pr="8"
	>
		<div class={css({ w: 10, p: 0 })}>
			{position.logo === 'ambition' && <LogoAmbition />}
			{position.logo === 'trabian' && <LogoTrabian />}
			{position.logo === 'emplify' && <LogoEmplify />}
			{position.logo === 'bluebridge' && <LogoBluebridge />}
		</div>
		<p>{position.company}</p>
		<div id="show-date">
			<Stack direction="column" gap="0" alignItems="end" color="muted">
				<DateFormatted
					date={position.endDate}
					format={{ day: undefined }}
				/>
				<DateFormatted
					date={position.startDate}
					format={{ day: undefined }}
				/>
			</Stack>
		</div>
	</Stack>
	<Stack justifyContent="center" gap="0" gridColumn="2 / span 1">
		{
			position.impactPoints.map((point: String) => (
				//
				<p>{point}</p>
			))
		}
		<p><span class={css({ color: 'muted' })}>as {position.title}</span></p>
		<!-- <p>from {position.startDate} to {position.endDate}</p> -->
	</Stack>
	<Stack
		gridColumn="3 / span 1"
		position="relative"
		px="8"
		overflowX="scroll"
		className="sideways-scroll"
		style={{
			maskImage,
			WebkitMaskImage: maskImage,
		}}
	>
		<div
			class={css({
				display: 'flex',
				flexDirection: 'row',
				position: 'relative',
				gap: 4,
			})}
		>
			<Stack
				{...{
					aspectRatio: 'square',
					h: '100%',
					// bg: 'red.800',
					textAlign: 'center',
					alignItems: 'center',
					position: 'relative',
					'& > #show-name': {
						// display: 'none',
						opacity: 0,
						position: 'absolute',
						bottom: 0,
						left: 0,
						right: 0,
						// bg: 'bg/50',
						zIndex: 100,
						py: 2,
					},
					_hover: {
						// bg: 'red.600',
						'& > #show-name': {
							// display: 'flex',
							opacity: 1,
							shadow: 'md',
						},
					},
				}}
			>
				<div
					class={css({
						h: '100%',
						aspectRatio: 'square',
						p: 2,
					})}
				>
					<SvgProjectMobileRooted />
				</div>

				<div id="show-name">
					<div
						class={css({
							position: 'absolute',
							bottom: 0,
							left: 0,
							right: 0,
							height: 20,
							// marginLeft: -8,
							pointerEvents: 'none',
						})}
					>
						<ProgressiveBlur blur={50} blurDirection="bottom" />
					</div>
					<span
						class={css({
							position: 'absolute',
							bottom: -4,
							left: 0,
							right: 0,
							height: 12,
							// marginLeft: -8,
							// pointerEvents: 'none',
							zIndex: 200,
						})}>The Worm</span
					>
				</div>
			</Stack>
			<div
				class={css({
					h: '100%',
					aspectRatio: 'square',
					p: 2,
					// bg: 'red.800',
				})}
			>
				<SvgProjectArtTheWorm />
			</div>
			<div
				class={css({
					h: '100%',
					aspectRatio: 'square',
					p: 2,
					// bg: 'red.800',
				})}
			>
				<SvgProjectBrowserVivaFirst />
			</div>
			<div
				class={css({
					h: '100%',
					aspectRatio: 'square',
					p: 2,
					// bg: 'red.800',
				})}
			>
				<SvgProjectDesktopVisaViz />
			</div>
			{
				Array.from({ length: 10 }, (_, i) => (
					<div
						class={css({
							bg: 'red.800',
							p: 16,
							m: 2,
							rounded: '3xl',
						})}
					>
						<p>project</p>
					</div>
				))
			}
		</div>
		<div
			class={css({
				position: 'fixed',
				top: 0,
				bottom: 0,
				width: 12,
				marginLeft: -8,
				pointerEvents: 'none',
			})}
		>
			<ProgressiveBlur blur={20} blurDirection="left" />
		</div>
	</Stack>
</div>

<script>
	// Add horizontal scrolling

	let lastScrollLeft: number | null = null

	function transformScroll(event: Event) {
		const e = event as WheelEvent

		if (!e.currentTarget) return
		const currentTarget = e.currentTarget as HTMLElement

		// Store the initial scroll position before attempting to scroll
		const initialScrollLeft = currentTarget.scrollLeft

		// Attempt to scroll
		currentTarget.scrollLeft += e.deltaY

		// After scrolling, check if the scrollLeft value has changed
		if (currentTarget.scrollLeft === lastScrollLeft) {
			// If the scrollLeft value hasn't changed, we might be at the end or start, depending on scroll direction
			if (e.deltaY > 0) {
				// Scrolling forward, check if at the end
				if (initialScrollLeft === currentTarget.scrollLeft) {
					// console.log('Reached the end of horizontal scroll')
				}
			} else {
				// Scrolling backward, check if at the start
				if (currentTarget.scrollLeft === 0) {
					// console.log('Reached the start of horizontal scroll')
				}
			}
		} else {
			// console.log('Scrolling')
			e.preventDefault()
		}

		// Store the last scrollLeft value for comparison in the next event
		lastScrollLeft = currentTarget.scrollLeft
	}

	document.querySelectorAll('.sideways-scroll').forEach((div: Element) => {
		div.addEventListener('wheel', transformScroll, { passive: false })
	})
</script>
