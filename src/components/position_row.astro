---
import { css } from 'ui/css'
import { token } from 'ui/tokens'

import Stack from '@/components/stack.astro'
import type { Position } from '@/data/positions'

import ProjectItem from './project_item.astro'
import ProgressiveBlur from './progressive_blur.astro'
import DateFormatted from './date_formatted.astro'
import LogoAmbition from './logo_ambition.astro'
import LogoTrabian from './logo_trabian.astro'
import LogoEmplify from './logo_emplify.astro'
import LogoBluebridge from './logo_bluebridge.astro'

const position: Position = Astro.props.position

let blurDirection = 'right'
let gradientStart = '0px'
let gradientEnd = token('sizes.8')
let maskImage = `linear-gradient(to ${blurDirection}, rgba(0, 0, 0, 0) ${gradientStart}, rgba(0, 0, 0, 1) ${gradientEnd})`
---

<div
	class={css({
		display: 'grid',
		gridRow: 'span 2',
		gridColumn: 'span 2',
		alignItems: 'center',
		// alignContent: 'center',
		// justifyContent: 'center',
		// textAlign: 'center',
		// gridTemplateRows: '1fr 1fr',
		// justifyItems: 'center', // center things inside
		gap: 4,
		sm: {
			textAlign: 'inherit',
			gridTemplateColumns: 'auto auto',
		},
		md: {
			gap: 0,
			// gridRow: 'span 2',
			gridTemplateColumns: 'subgrid',
		},
		lg: {
			// justifyItems: 'end',
			gridRow: 'span 1',
			gridColumn: '1 / span 3',
			gridTemplateColumns: 'subgrid',
		},
		'--svg-fill-opacity': 0,
		'--svg-hover-opacity': 0,
		'--svg-stroke-opacity': 1,
		'& #show-date': {
			display: 'none',
		},
		_hover: {
			'--svg-fill-opacity': 1,
			'--svg-hover-opacity': 1,
			'--svg-stroke-opacity': 0,
			'& #show-date': {
				display: 'flex',
			},
		},
	})}
>
	<div
		class={css({
			display: 'grid',
			alignItems: 'center', // vertical center
			gap: 4,
			gridTemplateColumns: 'auto auto',
			gridColumn: '1 / span 1',
			sm: {
				gridColumn: '1 / span 1',
				gap: 2,
				justifyItems: 'end', // horizontal right
				gridTemplateColumns: 'auto',
			},
			md: {
				mr: 4,
			},
			lg: {
				gridColumn: '1 / span 1',
			},
			// bg: 'green.500/50',
		})}
	>
		<div class={css({ w: 10, p: 0, justifySelf: 'end' })}>
			{position.logo === 'ambition' && <LogoAmbition />}
			{position.logo === 'trabian' && <LogoTrabian />}
			{position.logo === 'emplify' && <LogoEmplify />}
			{position.logo === 'bluebridge' && <LogoBluebridge />}
		</div>
		<p class={css({})}>{position.company}</p>
		<!-- <div id="show-date">
			<Stack direction="column" gap="0" alignItems="end" color="muted">
				<DateFormatted
					date={position.endDate}
					format={{ day: undefined }}
				/>
				<DateFormatted
					date={position.startDate}
					format={{ day: undefined }}
				/>
			</Stack>
		</div> -->
	</div>
	<div
		class={css({
			// bg: 'yellow.500/25',
			textAlign: 'center',
			gap: 0,
			gridColumn: '1 / span 1',
			sm: {
				textAlign: 'start',
				gridColumn: '2 / -1',
			},
			lg: {
				justifySelf: 'start',
				gridColumn: '2 / span 1',
			},
		})}
	>
		{
			position.impactPoints.map((point: String) => (
				//
				<p>{point}</p>
			))
		}
		<p><span class={css({ color: 'muted' })}>as {position.title}</span></p>
	</div>

	<div
		class:list={[
			css({
				// bg: 'red.500/25',
				position: 'relative',
				display: 'grid',
				gridColumn: '1 / -1',
				mt: 4,
				mb: 12,
				md: {},
				lg: {
					my: 4,
					gridColumn: '3 / -1',
				},
			}),
		]}
		style={{
			maskImage,
			WebkitMaskImage: maskImage,
		}}
	>
		<div
			class:list={[
				'sideways-scroll',
				css({
					pl: 8,
					overflowX: 'scroll',
					overflowY: 'hidden',
				}),
			]}
		>
			<div
				class={css({
					display: 'flex',
					flexDirection: 'row',
					gap: 4,
					w: 32,
					h: 36,
				})}
			>
				{
					position.projects?.map((project) => (
						<ProjectItem project={project} />
					))
				}
				<div
					class={css({
						w: 8,
						h: 8,
						aspectRatio: 'square',
					})}
				>
				</div>
			</div>
		</div>
		<div
			class={css({
				position: 'absolute',
				top: 0,
				bottom: 0,
				width: 16,
				ml: -4,
				pointerEvents: 'none',
				// bg: 'blue.500',
			})}
		>
			<ProgressiveBlur blur={32} blurDirection="left" />
		</div>
	</div>

	<script>
		// Add horizontal scrolling

		let lastScrollLeft: number | null = null

		function transformScroll(event: Event) {
			const e = event as WheelEvent

			if (!e.currentTarget) return
			const currentTarget = e.currentTarget as HTMLElement

			// Store the initial scroll position before attempting to scroll
			const initialScrollLeft = currentTarget.scrollLeft

			// Attempt to scroll
			currentTarget.scrollLeft += e.deltaY

			// After scrolling, check if the scrollLeft value has changed
			if (currentTarget.scrollLeft == lastScrollLeft) {
				// If the scrollLeft value hasn't changed, we might be at the end or start, depending on scroll direction
				if (e.deltaY > 0) {
					// Scrolling forward, check if at the end
					if (initialScrollLeft == currentTarget.scrollLeft) {
						console.log('Reached the end of horizontal scroll')
					}
				} else {
					// Scrolling backward, check if at the start
					if (currentTarget.scrollLeft == 0) {
						console.log('Reached the start of horizontal scroll')
					}
				}
			} else {
				console.log(
					'Scrolling',
					initialScrollLeft,
					lastScrollLeft,
					currentTarget.scrollLeft,
				)
				e.preventDefault()
			}

			// Store the last scrollLeft value for comparison in the next event
			lastScrollLeft = currentTarget.scrollLeft
		}

		document.querySelectorAll('.sideways-scroll').forEach((div: Element) => {
			div.addEventListener('wheel', transformScroll, { passive: false })
		})
	</script>
</div>
